TODO
    * pitch algorithm
    * onset detectection
    - define a test set of musical notes knowing the notes places and pitch of the notes
        to be able to perform qualitative assessment of the different methods
    - explore statistical assessment in order to find bests constante criterion (different threshold set in the program)
        , as most of them are set by trail and error but could not work on every test with maximum efficiency 
    - test warped function to see if pitch results are better.
    - implement SNAC pitch algorithm 
    - try a dual pitch algo :
        |low frequency: Modified Cepstrum
        |high frequency: SNAC
        ->filtering?
    - find others onset detections
    
    *see if notes could be directly imported from midi partition (almost certain)
        work fucking well why do i bother with detection algorithm already??
        
    -implement Markov chain to regenerate music.
    
    -Writte a detailled article on everything
    
    -use mind map ?
    -implement on stm32 ?

STATE OF THE ART
    PITCH DETECTION
        The Modified Cepstrum is implemented. A qualitative assessment on the pitch error is performed with the program
            OnsetAlgoTest.m which uses a set of piano notes from midi 23 to 107.
            It can be seen that it perform bad after ~87.
            Using this algorithm on the main.m lead in a bad estimation of pitch for high notes which are present in the test.
            ->SNAC
            
        
    ONSET
        The test on a dual set of pitch windows were not succesful. It consisted in using the a short window and a long window 
            performing both a sliding pitch estimation. When the short estimation differs from the long one a note should occur.
        
        Using an energy method the results seem to be accurate with few trial and error parameters selection. It performs well on them
            test with the program OnsetAlgoTest.m, however when the density of note become high, errors are occuring.
            It also not a versatile method as parameters are set by trial and error.
    
    MAIN
        If You run the main.m in the folder Matlab, you can see the results of the different algo.
            It's quite fast, however the last part to replay is quite consuming (CPU) because it's a fast patch.
            You can see that there is error in pitch, likely in the high frequency part because the original music the high pitched. There is also mistakes of note placements.